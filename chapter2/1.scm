;2.1 rational number
(define (gcd a b) (if (= b 0) a (gcd b (remainder a b))))
(define (make-rat n d) (let ((g (gcd n d)))
						(if (negative? (* n d))
						 (cons (- (abs (/ n g))) (abs (/ d g)))
						 (cons (abs (/ n g)) (abs (/ d g))))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
 (make-rat (+ (* (numer x) (denom y))
			  (* (numer y) (denom x)))
  		   (* (denom x) (denom y))))
(define (sub-rat x y)
 (make-rat (- (* (numer x) (denom y))
			  (* (numer y) (denom x)))
		   (* (denom x) (denom y))))
(define (mul-rat x y)
 (make-rat (* (numer x) (numer y))
  		   (* (denom x) (denom y))))
(define (div-rat x y)
 (make-rat (* (numer x) (denom y))
  		   (* (denom x) (numer y))))
(define (equal-rat? x y)
 (= (* (numer x) (denom y))
    (* (numer y) (denom x))))
(define (print-rat x) (newline) (display (numer x)) (display "/") (display (denom x)))
;2.2
(define (make-point a b) (cons a b))
(define (x-point point) (car point))
(define (y-point point) (cdr point))
(define (make-segment pointA pointB) (cons pointA pointB))
(define (start-segment segment) (car segment))
(define (end-segment segment) (cdr segment))
(define (average a b) (/ (+ a b)))
(define (midpoint-segment segment) (cons (average (x-point (start-segment segment)) (x-point (end-segment segment)))
										 (average (y-point (start-segment segment)) (y-point (end-segment segment)))))
;2.3
(define (make-rectangle segmentA segmentB) (cons segmentA segmentB))
(define (segmentA rectangle) (car rectangle))
(define (segmentB rectangle) (cdr rectangle))
(define (length segment) (sqrt (+ (square (abs (- (x-point (start-segment segment)) (x-point (end-segment segment))))
								  (square (abs (- (y-point (start-segment segment)) (y-point (end-segment segment)))))))))
(define (perimeter rectangle) (* 2 (+ (length (segmentA rectangle)) (length (segmentB rectangle)))))
(define (area rectangle) (* (length (segmentA rectangle)) (length (segmentB rectangle))))
