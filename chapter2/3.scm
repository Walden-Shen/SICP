;quote
(define (memq item x)
 (cond  ((null? x) #f)
  		((eq? item (car x)) x)
		(else (memq item (cdr x)))))
;2.53 simple
;2.54 
(define (equal? a b)
 (cond  ((and (not (pair? a)) (not (pair? b))) (eq? a b))
  		((and (pair? a) (pair? b)) (and (equal? (car a) (car b)) (equal? (cdr a) (cdr b))))
		(else #f)))
;2.54 (quote (quote abracadabra))
;differrentiation program
(define (deriv exp var)
 (cond  ((number? exp) 0)
  		((variable? exp) (if (same-variable? exp var) 1 0))
		((sum? exp) (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
		((product? exp) (make-sum (make-product (multiplier exp) (deriv (multiplicand exp) var))
								  (make-product (deriv (multiplier exp) var) (multiplicand exp))))
		(else (error "unknown expression type -- deriv" exp))))
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (make-sum a1 a2) (list '+ a1 a2))
(define (make-product a1 a2) (list '* a1 a2))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
