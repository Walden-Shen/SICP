;representation for complex numbers
(define (add-complex z1 z2) (make-from-real-imag (+ (real-part z1) (real-part z2)) (+ (imag-part z1) (imag-part z2))))
(define (sub-complex z1 z2) (make-from-real-imag (- (real-part z1) (real-part z2)) (- (imag-part z1) (imag-part z2))))
(define (mul-complex z1 z2) (make-from-mag-ang (* (maginitude z1) (maginitude z2)) (+ (angle z1) (angle z2))))
(define (div-complex z1 z2) (make-from-mag-ang (/ (maginitude z1) (maginitude z2)) (- (angle z1) (angle z2))))
(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular z) (cdr z))
(define (maginitude-rectangular z) (sqrt (+ (square (real-part-rectangular z)) (square (imag-part-rectangular z)))))
(define (angle z) (atan (imag-part-rectangilar z) (real-part-rectangular z)))
(define (make-from-real-imag x y) (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang r a) (attach-tag 'rectangular (cons (* r (cos a)) (* r (sin a)))))
(define (attach-tag type-tag contents) (cons type-tag contents))
(define (type-tag datum) (if (pair? datum) (car datum) (error "Bad tagged datum -- TYPE-TAG" datum)))
(define (contents datum) (if (pair? datum) (cdr datum) (error "Bad tagged datum -- CONTENTS" datum)))
(define (rectangular? z) (eq? (type-tag z) 'rectangular))
(define (polar? z) (eq? (type-tag z) 'polar))
;most interesting part
(define (install-polar-package)
 (define (maginitude z) (car z))
 (define (angle z) (cdr z))
 (define (real-part z) (* (maginitude z) (cos (angle z))))
 ;interface to the rest of the system
 (define (tag x) (attach-tag 'polar x))
 (put 'real-part 'polar real-part)
 'done)
(define (apply-generic op . args)
 (let ((type-tags (map type-tag args)))
  (let ((proc (get op type-tags)))
   (if proc (apply proc (map contents args)) (error "No method for these types -- APPLY-GENERIC" (list op type-tags))))))
;2.73
(define (deriv exp var)
 (cond  ((number? exp) 0)
  		((variable? exp) (if (same-variable? exp var) 1 0))
		(else ((get 'deriv (operator exp)) (operands exp) var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
;a if so, operands turn to be (cadr exp)
;b
(define (install-deriv-package)
 (define (sum-deriv operands var) (make-sum (sum-deriv (car operands) var) (sum-deriv (cadr operands var))))
 (put 'deriv '+ sum-deriv)
 'done)
;c similar to b
;d silly
;message passing
(define (make-from-real-imag x y)
 (define (dispatch op)
  (cond ((eq? op 'real-part) x)
   		((eq? op 'imag-part) y)
		((eq? op 'magnitude) (sqrt (+ (square x) (square y))))
		((eq? op 'angle) (atan y x))
		(else (error "unknown op" op))))
 dispatch)
(define (apply-generic op arg) (arg op))
;2.75
(define (make-from-mag-ang r a)
 (define (dispatch op)
  (cond ((eq? op 'real-part) (* r (cos a)))
   		((eq? op 'imag-part) (* r (sin a)))
		((eq? op 'magnitude) r)
		((eq? op 'angle) a)
		(else (error "Unknown op" op))))
 dispatch)
;2.76 message passing is suitable for new types, data-directed is for both
